'''
Created on Apr 1, 2017

to test My_TCP, Sender_Thread, Receiver_thread

@author: jee11
'''
import queue.Queue
import socket

#import hello.jeeva.hello.My_TCP.My_TCP
#import jeeva.hello.Receiver_Thread.Receiver_Thread
#import jeeva.hello.Sender_Thread.Sender_Thread

from jeeva.hello import My_TCP
from threading import Thread
from asyncio.tasks import sleep
from jeeva.hello import Sender_Thread
from jeeva.hello import Receiver_Thread
from jeeva.hello.comm_tester import Send_Processor
from jeeva.hello.comm_tester import Received_Processor

server_send=queue.Queue(0)
server_receive=queue.Queue(0)
client_send=queue.Queue(0)
client_receive=queue.Queue(0)

server_socket=My_TCP(ip="127.0.0.1",port=5005,con_type="server")
client_socket=My_TCP(ip="127.0.0.1",port=5005,con_type="client")

server_sender=Sender_Thread(server_send,server_socket)
server_receiver=Receiver_Thread(server_receive,server_socket)

client_sender=Sender_Thread(client_send,client_socket)
client_receive=Receiver_Thread(client_receive,client_socket)

server_send_processor= Send_Processor(server_send)




class Send_Processor(Thread):
    
    def __init__(self,send_Q=queue.Queue(0)):
        self.send_Q=send_Q
    
    
    def run(self,):
        pass
        self.send_process()
        
        
    def send_process(self):    
        counter=1
        while(True):
            self.send_Q.put(counter)
            counter=counter+1
            sleep(1000)
            
    
class Received_Processor(Thread):
    
    def __init__(self, received_Q=queue.Queue(0),con_type="client"):
        self.received_Q=received_Q
        self.con_type=con_type
        
    
    
    def run(self):
        pass
        self.receive_process()
        
        
    def receive_process(self):    
        while(True):
            if(~self.received_Q.isEmpty()):
                data=self.received_Q.get()
                print("from{} data{}".format(self.con_type,data))
        






